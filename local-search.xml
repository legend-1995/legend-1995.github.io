<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>21-设计模式阶段性测评试题讲解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B5%8B%E8%AF%84%E8%AF%95%E9%A2%98%E8%AE%B2%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B5%8B%E8%AF%84%E8%AF%95%E9%A2%98%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20-各设计模式总结与对比</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20-%E5%90%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20-%E5%90%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19-访问者模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18-观察者模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17-解释器模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16-中介者模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-备忘录模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14-状态模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13-命令模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12-迭代器模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-策略模式与责任链模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10-装饰器模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9-门面模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8-委派模式与模板方法模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8-%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8-%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-享元模式与组合模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-适配器模式与桥接模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-深度分析代理模式</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-原型模式与建造者模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-单例模式详解</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-设计模式总览及工厂模式</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E8%A7%88%E5%8F%8A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E8%A7%88%E5%8F%8A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-重新认识UML之时序图</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1-UML%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/2-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86UML%E4%B9%8B%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1-UML%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/2-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86UML%E4%B9%8B%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>UML设计技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML设计技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-重新认识UML之类图</title>
    <link href="/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1-UML%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/1-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86UML%E4%B9%8B%E7%B1%BB%E5%9B%BE/"/>
    <url>/2021/08/27/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1-UML%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/1-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86UML%E4%B9%8B%E7%B1%BB%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>UML设计技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML设计技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-Redis高性能网络IO模型</title>
    <link href="/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/5-Redis%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/5-Redis%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的性能由哪些因素决定？"><a href="#Redis的性能由哪些因素决定？" class="headerlink" title="Redis的性能由哪些因素决定？"></a>Redis的性能由哪些因素决定？</h1><ol><li>内存 </li><li>CPU </li><li>网络通信</li></ol><h1 id="网络通信模型"><a href="#网络通信模型" class="headerlink" title="网络通信模型"></a>网络通信模型</h1><p>最终目标： 增加客户端的访问连接数量</p><p>TCP/IP: ip:port访问目标服务的指定进程</p><h2 id="BIO（阻塞IO模型）"><a href="#BIO（阻塞IO模型）" class="headerlink" title="BIO（阻塞IO模型）"></a>BIO（阻塞IO模型）</h2><p>ServerSocket</p><p>Socket</p><h3 id="阻塞体现在两个地方"><a href="#阻塞体现在两个地方" class="headerlink" title="阻塞体现在两个地方"></a>阻塞体现在两个地方</h3><ol><li>连接阻塞</li><li>IO阻塞</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>zookeeper的leader选举（3个节点， 5个节点）</li><li>nacos的注册地址信息同步</li></ol><h2 id="NIO（非阻塞IO）"><a href="#NIO（非阻塞IO）" class="headerlink" title="NIO（非阻塞IO）"></a>NIO（非阻塞IO）</h2><p>把连接阻塞和IO阻塞改成非阻塞</p><h2 id="Redis-为什么那么快"><a href="#Redis-为什么那么快" class="headerlink" title="Redis 为什么那么快"></a>Redis 为什么那么快</h2><p>Redis的高性能主要依赖于几个方面。</p><ol><li>C语言实现，C语言在一定程度上还是比Java语言性能要高一些，因为C语言不需要经过JVM进行翻译。</li><li>纯内存I/O，内存I/O比磁盘I/O性能更快</li><li>I/O多路复用，基于epoll的I/O多路复用技术，实现高吞吐网络I/O</li><li>单线程模型，单线程无法利用到多核CPU，但是在Redis中，性能瓶颈并不是在计算上，而是在I/O 能力，所以单线程能够满足高并发的要求。 从另一个层面来说，单线程可以避免多线程的频繁上 下文切换以及同步锁机制带来的性能开销。</li></ol><p>下面我们分别从上述几个方面进行展开说明，先来看网络I/O的多路复用模型。</p><h2 id="从请求处理开始分析"><a href="#从请求处理开始分析" class="headerlink" title="从请求处理开始分析"></a>从请求处理开始分析</h2><p>当我们在客户端向Redis Server发送一条指令，并且得到Redis回复的整个过程中，Redis做了什么呢？</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827143332.png"></p><p>要处理命令，则redis必须完整地接收客户端的请求，并将命令解析出来，再将结果读出来，通过网络回 写到客户端。整个工序分为以下几个部分：</p><ol><li>接收，通过TCP接收到命令，可能会历经多次TCP包、ack、IO操作 </li><li>解析，将命令取出来 </li><li>执行，到对应的地方将value读出来 </li><li>返回，将value通过TCP返回给客户端，如果value较大，则IO负荷会更重</li></ol><p>其中<strong>解析</strong>和<strong>执行</strong>是纯cpu/内存操作，而接收和返回主要是IO操作，首先我们先来看通信的过程。</p><h3 id="网络IO的通信原理"><a href="#网络IO的通信原理" class="headerlink" title="网络IO的通信原理"></a>网络IO的通信原理</h3><p>同样，我也画了一幅图来描述网络数据的传输流程</p><p>首先，对于TCP通信来说，每个TCP Socket的内核中都有一个发送缓冲区和一个接收缓冲区</p><p>接收缓冲区把数据缓存到内核，若应用进程一直没有调用Socket的read方法进行读取，那么该数据会一 直被缓存在接收缓冲区内。不管进程是否读取Socket，对端发来的数据都会经过内核接收并缓存到 Socket的内核接收缓冲区。</p><p>read所要做的工作，就是把内核接收缓冲区中的数据复制到应用层用户的Buffer里。</p><p>进程调用Socket的send发送数据的时候，一般情况下是将数据从应用层用户的Buffer里复制到Socket的 内核发送缓冲区，然后send就会在上层返回。换句话说，send返回时，数据不一定会被发送到对端。</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827143658.png"></p><p>网卡中的缓冲区既不属于内核空间，也不属于用户空间。它属于硬件缓冲，允许网卡与操作系统之间有 个缓冲； 内核缓冲区在内核空间，在内存中，用于内核程序，做为读自或写往硬件的数据缓冲区； 用 户缓冲区在用户空间，在内存中，用于用户程序，做为读自或写往硬件的数据缓冲区网卡芯片收到网络数据会以中断的方式通知CPU，我有数据了，存在我的硬件缓冲里了，来读我啊。 CPU收到这个中断信号后，会调用相应的驱动接口函数从网卡的硬件缓冲里把数据读到内核缓冲区，正 常情况下会向上传递给TCP/IP模块一层一层的处理。</p><h3 id="NIO多路复用机制"><a href="#NIO多路复用机制" class="headerlink" title="NIO多路复用机制"></a>NIO多路复用机制</h3><p>Redis的通信采用的是多路复用机制，什么是多路复用机制呢？</p><blockquote><p>由于Redis是C语言实现，为了简化大家的理解，我们采用Java语言来描述这个过程。</p></blockquote><p>在理解多路复用之前，我们先来了解一下BIO。</p><h3 id="BIO模型"><a href="#BIO模型" class="headerlink" title="BIO模型"></a>BIO模型</h3><p>在Java中，如果要实现网络通信，我们会采用Socket套接字来完成。 </p><p>Socket这不是一个协议，而是一个通信模型。其实它最初是BSD发明的，主要用来一台电脑的两个进程 间通信，然后把它用到了两台电脑的进程间通信。所以，可以把它简单理解为进程间通信，不是什么高 级的东西。主要做的事情不就是：</p><ol><li>A发包：发请求包给某个已经绑定的端口（所以我们经常会访问这样的地址182.13.15.16:1235， 1235就是端口）；收到B的允许；然后正式发送；发送完了，告诉B要断开链接；收到断开允许， 马上断开，然后发送已经断开信息给B。 </li><li>B收包：绑定端口和IP；然后在这个端口监听；接收到A的请求，发允许给A，并做好接收准备，主 要就是清理缓存等待接收新数据；然后正式接收；接受到断开请求，允许断开；确认断开后，继续 监听其它请求。</li></ol><p>可见，Socket其实就是I/O操作，Socket并不仅限于网络通信，在网络通信中，它涵盖了网络层、传输 层、会话层、表示层、应用层——其实这都不需要记，因为Socket通信时候用到了IP和端口，仅这两个 就表明了它用到了网络层和传输层；而且它无视多台电脑通信的系统差别，所以它涉及了表示层；一般 Socket都是基于一个应用程序的，所以会涉及到会话层和应用层。</p><h4 id="构建基础的BIO通信模型"><a href="#构建基础的BIO通信模型" class="headerlink" title="构建基础的BIO通信模型"></a>构建基础的BIO通信模型</h4><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIOServerSocket</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8080</span>);<br>            System.out.println(<span class="hljs-string">&quot;启动服务，监听接口8080&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">//表示阻塞等待监听一个客户端连接，返回的socket表示连接的客户端信息</span><br>                Socket socket = serverSocket.accept();<br>                System.out.println(<span class="hljs-string">&quot;客户端：&quot;</span> + socket.getPort());<br><br>                <span class="hljs-comment">//获取客户端的请求报文</span><br>                <span class="hljs-comment">//inputstream是阻塞的</span><br>                BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>                String clientStr = bufferedReader.readLine();<br>                System.out.println(<span class="hljs-string">&quot;收到客户端发送的消息：&quot;</span> + clientStr);<br><br>                BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(socket.getOutputStream()));<br>                bufferedWriter.write(<span class="hljs-string">&quot;receive a message：&quot;</span> + clientStr + <span class="hljs-string">&quot;\n&quot;</span>);<br>                bufferedWriter.flush();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(serverSocket!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    serverSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="BIO有什么弊端呢？"><a href="#BIO有什么弊端呢？" class="headerlink" title="BIO有什么弊端呢？"></a>BIO有什么弊端呢？</h5><p>我们通过对BIOServerSocket进行改造，关注case1和case2部分。</p><ol><li>case1: 增加了while循环，实现重复监听 </li><li>case2: 当服务端收到客户端的请求后，不直接返回，而是等待20s。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIOServerSocket</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException,</span><br><span class="hljs-function">InterruptedException  </span>&#123;<br>        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8080</span>);<br>            System.out.println(<span class="hljs-string">&quot;启动服务，监听接口8080&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123; <span class="hljs-comment">//case1: 增加循环，允许循环接收请求</span><br>                <span class="hljs-comment">//表示阻塞等待监听一个客户端连接，返回的socket表示连接的客户端信息</span><br>                Socket socket = serverSocket.accept();<br>                System.out.println(<span class="hljs-string">&quot;客户端：&quot;</span> + socket.getPort());<br><br>                <span class="hljs-comment">//获取客户端的请求报文</span><br>                <span class="hljs-comment">//inputstream是阻塞的</span><br>                BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>                String clientStr = bufferedReader.readLine(); <span class="hljs-comment">//读取一行信息</span><br>                System.out.println(<span class="hljs-string">&quot;收到客户端发送的消息：&quot;</span> + clientStr);<br>Thread.sleep(<span class="hljs-number">20000</span>); <span class="hljs-comment">//case2: 修改：增加等待时间</span><br>              <br>                BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(socket.getOutputStream()));<br>                bufferedWriter.write(<span class="hljs-string">&quot;receive a message：&quot;</span> + clientStr + <span class="hljs-string">&quot;\n&quot;</span>);<br>                bufferedWriter.flush();  <span class="hljs-comment">//清空缓冲区触发消息发送</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(serverSocket!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    serverSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此时如果打开两个cmd窗口，分别为client1、client2，分别输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">telnet localhost <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>运行后的现象就会发现，client1先发送请求都server端，由于server端需要20s才会返回，所以导致clinet2的请求一直被阻塞着</p><p>这个情况会导致一个问题，如果服务端在同一个时刻只能处理一个客户端的连接，而如果一个网站同时 有1000个用户访问，那么剩下的999个用户都需要等待，而这个等待的耗时取决于前面的请求的处理时 长，如下图所示</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827145206.png"></p><h4 id="基于多线程优化BIO"><a href="#基于多线程优化BIO" class="headerlink" title="基于多线程优化BIO"></a>基于多线程优化BIO</h4><p>为了让服务端能够同时处理更多的客户端连接，避免因为某个客户端连接阻塞导致后续请求被阻塞，于 是引入多线程技术，代码如下</p><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SocketThread</span><span class="hljs-params">(Socket socket)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取客户端的请求报文</span><br>            <span class="hljs-comment">//inputstream是阻塞的</span><br>            BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>            String clientStr = bufferedReader.readLine();<br>            System.out.println(<span class="hljs-string">&quot;收到客户端发送的消息：&quot;</span> + clientStr);<br><br>            BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(socket.getOutputStream()));<br>            bufferedWriter.write(<span class="hljs-string">&quot;receive a message：&quot;</span> + clientStr + <span class="hljs-string">&quot;\n&quot;</span>);<br>            bufferedWriter.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIOServerSocketWithThread</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8080</span>);<br>            System.out.println(<span class="hljs-string">&quot;启动服务，监听接口8080&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">//表示阻塞等待监听一个客户端连接，返回的socket表示连接的客户端信息</span><br>                Socket socket = serverSocket.accept();<br>                System.out.println(<span class="hljs-string">&quot;客户端：&quot;</span> + socket.getPort());<br><br>                <span class="hljs-comment">//IO变成了异步执行</span><br>                executorService.submit(<span class="hljs-keyword">new</span> SocketThread(socket));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(serverSocket!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    serverSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当引入了多线程之后，每个客户端的链接（Socket），我们可以直接给到线程池去执 行，而由于这个过程是异步的，所以并不会同步阻塞影响后续链接的监听，因此在一定程度上可以提升 服务端链接的处理数量</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827145400.png"></p><h3 id="NIO非阻塞IO"><a href="#NIO非阻塞IO" class="headerlink" title="NIO非阻塞IO"></a>NIO非阻塞IO</h3><p>使用多线程的方式来解决这个问题，仍然有一个缺点，线程的数量取决于硬件配置，所以线程数量是有 限的，如果请求量比较大的时候，线程本身会收到限制从而并发量也不会太高。那怎么办呢，我们可以 采用非阻塞IO。</p><p>NIO 从JDK1.4 提出的，本意是New IO，它的出现为了弥补原本IO的不足，提供了更高效的方式，提出 一个通道（channel）的概念，在IO中它始终以流的形式对数据的传输和接受，下面我们演示一下NIO 的使用。</p><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NIOServerSocket</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * NIO的核心</span><br><span class="hljs-comment">     * channel</span><br><span class="hljs-comment">     * buffer</span><br><span class="hljs-comment">     * selector</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();<br>            serverSocketChannel.configureBlocking(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//设置连接非阻塞</span><br>            serverSocketChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-number">8080</span>)); <span class="hljs-comment">//绑定端口</span><br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">//获得一个客户端连接</span><br>                SocketChannel socketChannel = serverSocketChannel.accept();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> != socketChannel)&#123;<br>                    <span class="hljs-comment">//IO非阻塞</span><br>                    socketChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>                    ByteBuffer byteBuffer=ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>                    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                        <span class="hljs-keyword">int</span> i = socketChannel.read(byteBuffer);<br>                        <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;<br>                            System.out.println(<span class="hljs-keyword">new</span> String(byteBuffer.array()));<br>                            byteBuffer.flip(); <span class="hljs-comment">//反转</span><br>                            socketChannel.write(byteBuffer);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            System.out.println(<span class="hljs-string">&quot;IO未就绪&quot;</span>);<br>                            Thread.sleep(<span class="hljs-number">5000</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                    System.out.println(<span class="hljs-string">&quot;连接未就绪&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所谓的NIO（非阻塞IO），其实就是取消了IO阻塞和连接阻塞，当服务端不存在阻塞的时候，就可以不 断轮询处理客户端的请求，下图表示NIO下的运行流程。</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827145628.png"></p><p>上述这种NIO的使用方式，仍然存在一个问题，就是客户端或者服务端需要通过一个线程不断轮询才能 获得结果，而这个轮询过程中会浪费线程资源。</p><h3 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h3><p>大家站在全局的角度再思考一下整个过程，有哪些地方可以优化呢？</p><p>我们回到NIOServerSocket中下面这段代码，当客户端通过 read 方法去读取服务端返回的数据时，如果 此时服务端数据未准备好，对于客户端来说就是一次无效的轮询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>  <span class="hljs-keyword">int</span> i = socketChannel.read(byteBuffer);<br>  <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-keyword">new</span> String(byteBuffer.array()));<br>    byteBuffer.flip(); <span class="hljs-comment">//反转</span><br>    socketChannel.write(byteBuffer);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;IO未就绪&quot;</span>);<br>    Thread.sleep(<span class="hljs-number">5000</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们能不能够设计成，当客户端调用 read 方法之后，不仅仅不阻塞，同时也不需要轮询。而是等到服 务端的数据就绪之后， 告诉客户端。然后客户端再去读取服务端返回的数据呢？</p><blockquote><p>就像点外卖一样，我们在网上下单之后，继续做其他事情，等到外卖到了公司，外卖小哥主动打 电话告诉你，你直接去前台取餐即可。</p><p>所以为了优化这个问题，引入了多路复用机制。</p></blockquote><p>I/O多路复用的本质是通过一种机制（系统内核缓冲I/O数据），让单个进程可以监视多个文件描述符， 一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作</p><blockquote><p>什么是fd：在linux中，内核把所有的外部设备都当成是一个文件来操作，对一个文件的读写会调 用内核提供的系统命令，返回一个fd(文件描述符)。而对于一个socket的读写也会有相应的文件描 述符，成为socketfd。</p></blockquote><p>常见的IO多路复用方式有<strong>【select、poll、epoll】</strong>，都是Linux API提供的IO复用方式，那么接下来重 点讲一下<strong>select</strong>、和<strong>epoll</strong>这两个模型</p><ol><li>select：进程可以通过把一个或者多个fd传递给select系统调用，进程会阻塞在select操作上，这 样select可以帮我们检测多个fd是否处于就绪状态，这个模式有两个缺点<ul><li>由于他能够同时监听多个文件描述符，假如说有1000个，这个时候如果其中一个fd 处于就绪 状态了，那么当前进程需要线性轮询所有的fd，也就是监听的fd越多，性能开销越大。</li><li>同时，select在单个进程中能打开的fd是有限制的，默认是1024，对于那些需要支持单机上 万的TCP连接来说确实有点少</li></ul></li><li>epoll：linux还提供了epoll的系统调用，epoll是基于事件驱动方式来代替顺序扫描，因此性能相 对来说更高，主要原理是，当被监听的fd中，有fd就绪时，会告知当前进程具体哪一个fd就绪，那 么当前进程只需要去从指定的fd上读取数据即可，另外，epoll所能支持的fd上线是操作系统的最 大文件句柄，这个数字要远远大于1024</li></ol><blockquote><p>【由于epoll能够通过事件告知应用进程哪个fd是可读的，所以我们也称这种IO为异步非阻塞IO， 当然它是伪异步的，因为它还需要去把数据从内核同步复制到用户空间中，真正的异步非阻塞， 应该是数据已经完全准备好了，我只需要从用户空间读就行】</p></blockquote><p>I/O多路复用的好处是可以通过把多个I/O的阻塞复用到同一个select的阻塞上，从而使得系统在单线程 的情况下可以同时处理多个客户端请求。它的最大优势是系统开销小，并且不需要创建新的进程或者线 程，降低了系统的资源开销，它的整体实现思想如图</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827152258.png"></p><p>客户端请求到服务端后，此时客户端在传输数据过程中，为了避免Server端在read客户端数据过程中阻 塞，服务端会把该请求注册到Selector复路器上，服务端此时不需要等待，只需要启动一个线程，通过 selector.select()阻塞轮询复路器上就绪的channel即可，也就是说，如果某个客户端连接数据传输完 成，那么select()方法会返回就绪的channel，然后执行相关的处理即可。</p><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * description 多路复用机制</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> legend</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/8 12:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> null</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NIOSelectorServerSocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    Selector selector;<br>    ServerSocketChannel serverSocketChannel;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NIOSelectorServerSocket</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//打开多路复用机制</span><br>        selector = Selector.open();<br>        serverSocketChannel = ServerSocketChannel.open();<br>        <span class="hljs-comment">//如果采用selector模型，必须要设置非阻塞</span><br>        serverSocketChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        serverSocketChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(port));<br>        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(!Thread.interrupted())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//阻塞等待事件就绪</span><br>                selector.select();<br>                <span class="hljs-comment">//事件列表</span><br>                Set selected=selector.selectedKeys(); <span class="hljs-comment">//事件列表</span><br>                Iterator it =selected.iterator();<br>                <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>                    <span class="hljs-comment">//说明有连接进来</span><br>                    dispatch((SelectionKey) it.next());<br>                    it.remove();<span class="hljs-comment">//移除当前就绪的事件</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatch</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">if</span>(key.isAcceptable())&#123; <span class="hljs-comment">//是连接事件？</span><br>            register(key);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key.isReadable())&#123; <span class="hljs-comment">//读事件</span><br>            read(key);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key.isWritable())&#123; <span class="hljs-comment">//写事件</span><br>            <span class="hljs-comment">//TODO</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocketChannel channel= (ServerSocketChannel) key.channel(); <span class="hljs-comment">//客户端连接</span><br>        SocketChannel socketChannel=channel.accept(); <span class="hljs-comment">//获得客户端连接</span><br>        socketChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        socketChannel.register(selector,SelectionKey.OP_READ);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//得到的是socketChannel</span><br>        SocketChannel channel= (SocketChannel) key.channel();<br>        ByteBuffer byteBuffer=ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>        channel.read(byteBuffer);<br>        System.out.println(<span class="hljs-string">&quot;Server Receive Msg:&quot;</span>+<span class="hljs-keyword">new</span> String(byteBuffer.array()));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        NIOSelectorServerSocket selectorServerSocket=<span class="hljs-keyword">new</span> NIOSelectorServerSocket(<span class="hljs-number">8080</span>);<br>        <span class="hljs-keyword">new</span> Thread(selectorServerSocket).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上NIO已经解决了上述BIO暴露的下面两个问题：</p><ol><li>同步阻塞IO，读写阻塞，线程等待时间过长。</li><li>在制定线程策略的时候，只能根据CPU的数目来限定可用线程资源，不能根据连接并发数目来制 定，也就是连接有限制。否则很难保证对客户端请求的高效和公平。</li></ol><p>到这里为止，通过NIO的多路复用机制，解决了IO阻塞导致客户端连接处理受限的问题，服务端只需要 一个线程就可以维护多个客户端，并且客户端的某个连接如果准备就绪时，会通过事件机制告诉应用程 序某个channel可用，应用程序通过select方法选出就绪的channel进行处理。</p><h3 id="单线程Reactor-模型（高性能I-O设计模式）"><a href="#单线程Reactor-模型（高性能I-O设计模式）" class="headerlink" title="单线程Reactor 模型（高性能I/O设计模式）"></a>单线程Reactor 模型（高性能I/O设计模式）</h3><p>了解了NIO多路复用后，就有必要再和大家说一下Reactor多路复用高性能I/O设计模式，Reactor本质 上就是基于NIO多路复用机制提出的一个高性能IO设计模式，它的核心思想是把响应IO事件和业务处理 进行分离，通过一个或者多个线程来处理IO事件，然后将就绪得到事件分发到业务处理handlers线程去 异步非阻塞处理，如图</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210827152701.png"></p><p>Reactor模型有三个重要的组件：</p><ol><li>Reactor ：将I/O事件发派给对应的Handler </li><li>Acceptor ：处理客户端连接请求 </li><li>Handlers ：执行非阻塞读/写</li></ol><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Selector selector;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerSocketChannel serverSocketChannel;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Acceptor</span><span class="hljs-params">(Selector selector, ServerSocketChannel serverSocketChannel)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.selector = selector;<br>        <span class="hljs-keyword">this</span>.serverSocketChannel = serverSocketChannel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        SocketChannel channel;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            channel=serverSocketChannel.accept();<span class="hljs-comment">//得到一个客户端连接</span><br>            System.out.println(channel.getRemoteAddress()+<span class="hljs-string">&quot;:收到一个客户端连接&quot;</span>);<br>            channel.configureBlocking(<span class="hljs-keyword">false</span>);<br>            channel.register(selector, SelectionKey.OP_READ,<span class="hljs-keyword">new</span> Handler(channel));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    SocketChannel channe;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">(SocketChannel channe)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.channe = channe;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;------&quot;</span>);<br>        ByteBuffer buffer=ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">/*try &#123;</span><br><span class="hljs-comment">            Thread.sleep(1000000);</span><br><span class="hljs-comment">        &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>,total=<span class="hljs-number">0</span>;<br>        String msg=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                len = channe.read(buffer);<br>                <span class="hljs-keyword">if</span>(len&gt;<span class="hljs-number">0</span>)&#123;<br>                    total+=len;<br>                    msg+=<span class="hljs-keyword">new</span> String(buffer.array());<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (len &gt; buffer.capacity());<br>            System.out.println(<span class="hljs-string">&quot;total:&quot;</span>+total);<br><br>            <span class="hljs-comment">//msg=表示通信传输报文</span><br>                <span class="hljs-comment">//耗时2s</span><br>               <span class="hljs-comment">//登录： username:password</span><br>               <span class="hljs-comment">//ServetRequets: 请求信息</span><br>              <span class="hljs-comment">//数据库的判断</span><br>            <span class="hljs-comment">//返回数据，通过channel写回到客户端</span><br><br>            System.out.println(channe.getRemoteAddress()+<span class="hljs-string">&quot;: Server receive Msg:&quot;</span>+msg);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(channe!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    channe.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Selector selector;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerSocketChannel serverSocketChannel;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Reactor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        selector=Selector.open();<br>        serverSocketChannel= ServerSocketChannel.open();<br>        serverSocketChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(port));<br>        serverSocketChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT,<span class="hljs-keyword">new</span> Acceptor(selector,serverSocketChannel));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(!Thread.interrupted())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                selector.select();<br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>                    dispatch(iterator.next());<br>                    iterator.remove();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatch</span><span class="hljs-params">(SelectionKey key)</span></span>&#123;<br>        <span class="hljs-comment">//可能拿到的对象有两个</span><br>        <span class="hljs-comment">// Acceptor</span><br>        <span class="hljs-comment">// Handler</span><br>        Runnable runnable=(Runnable)key.attachment();<br>        <span class="hljs-keyword">if</span>(runnable!=<span class="hljs-keyword">null</span>)&#123;<br>            runnable.run();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactorMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Reactor(<span class="hljs-number">8080</span>),<span class="hljs-string">&quot;Main-Thread&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例的代码是最基本的单Reactor单线程模型（整体的I/O操作是由同一个线程完成的）。</p><p>其中Reactor线程，负责多路分离套接字，有新连接到来触发connect 事件之后，交由Acceptor进行处 理，有IO读写事件之后交给hanlder 处理。</p><p>Acceptor主要任务就是构建handler ，在获取到和client相关的SocketChannel之后 ，绑定到相应的 hanlder上，对应的SocketChannel有读写事件之后，基于racotor 分发,hanlder就可以处理了（所有的 IO事件都绑定到selector上，有Reactor分发）<br>》</p><blockquote><p>Reactor 模式本质上指的是使用 I/O 多路复用(I/O multiplexing) + 非阻塞 I/O(nonblocking I/O) 的模式。</p></blockquote><h3 id="多线程单Reactor模型"><a href="#多线程单Reactor模型" class="headerlink" title="多线程单Reactor模型"></a>多线程单Reactor模型</h3><p>单线程Reactor这种实现方式有存在着缺点，从实例代码中可以看出，handler的执行是串行的，如果其 中一个handler处理线程阻塞将导致其他的业务处理阻塞。由于handler和reactor在同一个线程中的执 行，这也将导致新的无法接收新的请求，我们做一个小实验：</p><ol><li>在上述Reactor代码的DispatchHandler的run方法中，增加一个Thread.sleep()。 </li><li>打开多个客户端窗口连接到Reactor Server端，其中一个窗口发送一个信息后被阻塞，另外一个窗 口再发信息时由于前面的请求阻塞导致后续请求无法被处理。</li></ol><p>为了解决这种问题，有人提出使用多线程的方式来处理业务，也就是在业务处理的地方加入线程池异步 处理，将reactor和handler在不同的线程来执行，如图</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/20210829144547.png"></p><h4 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiAcceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Selector selector;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerSocketChannel serverSocketChannel;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultiAcceptor</span><span class="hljs-params">(Selector selector, ServerSocketChannel serverSocketChannel)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.selector = selector;<br>        <span class="hljs-keyword">this</span>.serverSocketChannel = serverSocketChannel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        SocketChannel channel;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            channel=serverSocketChannel.accept();<span class="hljs-comment">//得到一个客户端连接</span><br>            System.out.println(channel.getRemoteAddress()+<span class="hljs-string">&quot;:收到一个客户端连接&quot;</span>);<br>            channel.configureBlocking(<span class="hljs-keyword">false</span>);<br>            channel.register(selector, SelectionKey.OP_READ,<span class="hljs-keyword">new</span> MutilDispatchHandler(channel));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MutilDispatchHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    SocketChannel channel;<br><br>    <span class="hljs-keyword">private</span> Executor executor= Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MutilDispatchHandler</span><span class="hljs-params">(SocketChannel channel)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.channel = channel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        processor();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processor</span><span class="hljs-params">()</span></span>&#123;<br>        executor.execute(<span class="hljs-keyword">new</span> ReaderHandler(channel));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReaderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>        <span class="hljs-keyword">private</span> SocketChannel channel;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReaderHandler</span><span class="hljs-params">(SocketChannel channel)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.channel = channel;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;:-----&quot;</span>);<br>            ByteBuffer buffer=ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>,total=<span class="hljs-number">0</span>;<br>            String msg=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    len = channel.read(buffer);<br>                    <span class="hljs-keyword">if</span>(len&gt;<span class="hljs-number">0</span>)&#123;<br>                        total+=len;<br>                        msg+=<span class="hljs-keyword">new</span> String(buffer.array());<br>                    &#125;<br>                &#125; <span class="hljs-keyword">while</span> (len &gt; buffer.capacity());<br>                System.out.println(<span class="hljs-string">&quot;total:&quot;</span>+total);<br><br>                <span class="hljs-comment">//msg=表示通信传输报文</span><br>                <span class="hljs-comment">//耗时2s</span><br>                <span class="hljs-comment">//登录： username:password</span><br>                <span class="hljs-comment">//ServetRequets: 请求信息</span><br>                <span class="hljs-comment">//数据库的判断</span><br>                <span class="hljs-comment">//返回数据，通过channel写回到客户端</span><br>                System.out.println(channel.getRemoteAddress()+<span class="hljs-string">&quot;: Server receive Msg:&quot;</span>+msg);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span>(channel!=<span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        channel.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiReactor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Selector selector;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerSocketChannel serverSocketChannel;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultiReactor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        selector=Selector.open();<br>        serverSocketChannel= ServerSocketChannel.open();<br>        serverSocketChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(port));<br>        serverSocketChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT,<span class="hljs-keyword">new</span> MultiAcceptor(selector,serverSocketChannel));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(!Thread.interrupted())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                selector.select();<br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>                    dispatch(iterator.next());<br>                    iterator.remove();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatch</span><span class="hljs-params">(SelectionKey key)</span></span>&#123;<br>        <span class="hljs-comment">//可能拿到的对象有两个</span><br>        <span class="hljs-comment">// Acceptor</span><br>        <span class="hljs-comment">// Handler</span><br>        Runnable runnable=(Runnable)key.attachment();<br>        <span class="hljs-keyword">if</span>(runnable!=<span class="hljs-keyword">null</span>)&#123;<br>            runnable.run(); <span class="hljs-comment">//</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiReactorMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> MultiReactor(<span class="hljs-number">8080</span>),<span class="hljs-string">&quot;Main-Thread&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在多线程Reactor单模型中，添加了一个工作者线程池，并将非I/O操作从Reactor线程中移出转交给工作者线程池来执行。这样能够提高Reactor线程的I/O响应，不至于因为一些耗时的业务逻辑而延迟对后面I/O请求的处理。</p>]]></content>
    
    
    <categories>
      
      <category>分布式与高并发</category>
      
      <category>分布式存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-Redis应用实战续集</title>
    <link href="/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/4-Redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E7%BB%AD%E9%9B%86/"/>
    <url>/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/4-Redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E7%BB%AD%E9%9B%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式与高并发</category>
      
      <category>分布式存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-Redis应用实战原理分析</title>
    <link href="/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/3-Redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/3-Redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式与高并发</category>
      
      <category>分布式存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-揭秘Redis如何提升程序处理性能</title>
    <link href="/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/2-%E6%8F%AD%E7%A7%98Redis%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E6%80%A7%E8%83%BD/"/>
    <url>/2021/08/26/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/2-%E6%8F%AD%E7%A7%98Redis%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式与高并发</category>
      
      <category>分布式存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-七大软件设计原则</title>
    <link href="/2021/08/26/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1-%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <url>/2021/08/26/1-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1-%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p>开闭原则（Open-Closed Principle, OCP）是指一个软 件实体如类、模块和函数应该对扩展开放，对修改关闭。所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调的是用抽象构建框架，用实现扩展细节。可以提高软件系统的可复用性和可维护性。开闭原则，是面向对象设计中最基础的设计原则，它指导我们如何建立稳定灵活的系统，例如：我们版本更新，我尽可能不修改源代码，但是可以增加新功能。</p><p>在现实生活中对于开闭原则也有体现。比如，很多互联网公司都实行弹性制作息时间，规定每天工作8小时。意思就是说，对于每天工作8小时这个规定是关闭的，但是你什么时候来，什么时候走开是开放的。早来早走，晚来晚走。</p><p>实现开闭原则的核心思想就是面向抽象编程，接下来我们来看一段代码：</p><p>以咕泡学院的课程体系为例，首先创建一个课程接口ICourse：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourse</span> </span>&#123;<br>    <span class="hljs-function">Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">Double <span class="hljs-title">getPrice</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个课程生态有 Java 架构、大数据、人工智能、前端、软件测试等，我们来创建一个 Java 架构课程的类 JavaCourse：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaCourse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICourse</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer Id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double price;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JavaCourse</span><span class="hljs-params">(Integer id, String name, Double price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.Id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.Id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们要给 Java 架构课程做活动，价格优惠。如果修改 JavaCourse 中的 getPrice()方法，则会 存在一定的风险，可能影响其他地方的调用结果。我们如何在不修改原有代码前提前下，实现价格优惠 这个功能呢？现在，我们再写一个处理优惠逻辑的类，JavaDiscountCourse 类（思考一下为什么要叫 JavaDiscountCourse，而不叫 DiscountCourse）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaDiscountCourse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JavaCourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JavaDiscountCourse</span><span class="hljs-params">(Integer id, String name, Double price)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(id, name, price);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 折扣价格</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getDiscountPrice</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice() * <span class="hljs-number">0.61</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>回顾一下，简单一下类结构图：</p><p><img src="https://gitee.com/chuanqi1995/image-bed/raw/master/images/image-20210222175713111.png"></p><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><p>依赖倒置原则则（Dependence Inversion Principle,DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。通过依赖倒置，可以减少类与类之间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。接下来看一个案例，还是以课程为例，先来创建一个类Tom：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">studyJavaCourse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Tom 在学习 Java 的课程&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">studyPythonCourse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Tom 在学习 Python 的课程&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>来调用一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyinversionTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Tom tom = <span class="hljs-keyword">new</span> Tom();<br>        tom.studyJavaCourse();<br>        tom.studyPythonCourse();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Tom热爱学习，目前正在学习Java课程和Python课程。大家都知道，学习也是会上瘾的。随着学习兴趣的暴涨，现在Tom还想学习AI人工智能的课程。这个时候，业务扩展，我们的代码要从底层（Tom）到高层（调用层）依次修改代码。比如在Tom类中增加studyAICourse()的方法，在高层也要追加调用。如此一来，系统发布以后，实际上是非常不稳定的，在修改代码的同时也会带来意想不到的风险。接下来我们优化代码，创建一个课程的抽象ICourse接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后写 JavaCourse 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaCourse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Tom 在学习 Java 课程&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再实现 PythonCourse 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonCourse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Tom 在学习 Python 课程&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改 Tom 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">(ICourse course)</span></span>&#123;<br>        course.study();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>来看调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyinversionTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Tom tom = <span class="hljs-keyword">new</span> Tom();<br>        tom.study(<span class="hljs-keyword">new</span> JavaCourse());<br>        tom.study(<span class="hljs-keyword">new</span> PythonCourse());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们这时候来看代码，Tom的兴趣无论怎么暴涨，对于新的课程，我只需要新建一个类，通过传参的方式告诉Tom，而不需要修改底层代码。实际上这是一种大家非常熟悉的方式，叫依赖注入。注入的方式还有构造器防水和setter方式。我们来看构造器注入方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ICourse course;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Tom</span><span class="hljs-params">(ICourse course)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.course = course;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        course.study();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyinversionTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Tom tom = <span class="hljs-keyword">new</span> Tom(<span class="hljs-keyword">new</span> JavaCourse());<br>        tom.study();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用构造器方式注入，在调用时，每次都要创建实例。那么，如果Tom是全局单例，则我们就只能选择用Setter方式来注入，继续修改Tom类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ICourse course;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCourse</span><span class="hljs-params">(ICourse course)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.course = course;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        course.study();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyinversionTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Tom tom = <span class="hljs-keyword">new</span> Tom();<br>        tom.setCourse(<span class="hljs-keyword">new</span> JavaCourse());<br>        tom.study();<br>        tom.setCourse(<span class="hljs-keyword">new</span> PythonCourse());<br>        tom.study();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们再来看最终的类图：</p><p><img src="../../../java/1.%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1.%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/doc/st/assets/clipboard.png" alt="img"></p><p>大家要切记：以抽象为基准比以细节为基准搭建起来的架构要稳定得多，因此大家在拿到需求之后，要面向接口编程，先顶层再细节来设计代码结构。</p><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>单一职责（Simple Responsibility Pinciple，SRP）是指不要存在多于一个导致类变更的原因。假 设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致 另一个职责的功能发生故障。这样一来，这个 Class 存在两个导致类变更的原因。如何解决这个问题呢？ 我们就要给两个职责分别用两个 Class 来实现，进行解耦。后期需求变更维护互不影响。这样的设计， 可以降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险。总体来说就是一 个 Class/Interface/Method 只负责一项职责。</p><p>接下来，我们来看代码实例，还是用课程举例，我们的课程有直播课和录播课。直播课不能快进和 快退，录播可以可以任意的反复观看，功能职责不一样。还是先创建一个 Course 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Course</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">(String courseName)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;直播课&quot;</span>.equals(courseName))&#123;<br>            System.out.println(<span class="hljs-string">&quot;不能快进&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;可以任意的来回播放&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看代码调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Course course = <span class="hljs-keyword">new</span> Course();<br>        course.study(<span class="hljs-string">&quot;直播课&quot;</span>);<br>        course.study(<span class="hljs-string">&quot;录播课&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从上面代码来看，Course 类承担了两种处理逻辑。假如，现在要对课程进行加密，那么直播课和录 播课的加密逻辑都不一样，必须要修改代码。而修改代码逻辑势必会相互影响容易造成不可控的风险。 我们对职责进行分离解耦，来看代码，分别创建两个类 ReplayCourse 和 LiveCourse：</p><p>LiveCourse 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LiveCourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">(String courseName)</span></span>&#123;<br>        System.out.println(courseName + <span class="hljs-string">&quot;不能快进看&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ReplayCourse 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReplayCourse</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">(String courseName)</span></span>&#123;<br>        System.out.println(courseName + <span class="hljs-string">&quot;可以任意的来回播放&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LiveCourse liveCourse = <span class="hljs-keyword">new</span> LiveCourse();<br>        liveCourse.study(<span class="hljs-string">&quot;直播课&quot;</span>);<br>        ReplayCourse replayCourse = <span class="hljs-keyword">new</span> ReplayCourse();<br>        replayCourse.study(<span class="hljs-string">&quot;录播课&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>业务继续发展，课程要做权限。没有付费的学员可以获取课程基本信息，已经付费的学员可以获得 视频流，即学习权限。那么对于控制课程层面上至少有两个职责。我们可以把展示职责和管理职责分离 开来，都实现同一个抽象依赖。设计一个顶层接口,创建 ICourse 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourse</span> </span>&#123;<br><br>    <span class="hljs-comment">//获得基本信息</span><br>    <span class="hljs-function">String <span class="hljs-title">getCourseName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//获得视频流</span><br>    <span class="hljs-keyword">byte</span>[] getCourseVideo();<br>    <span class="hljs-comment">//学习课程</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">studyCourse</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//退款</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">refundCourse</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以把这个接口拆成两个接口，创建一个接口 ICourseInfo 和 ICourseManager：</p><p>ICourseInfo 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourseInfo</span> </span>&#123;<br><br>    <span class="hljs-function">String <span class="hljs-title">getCourseName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">byte</span>[] getCourseVideo();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ICourseManager 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourseManager</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">studyCourse</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">refundCourse</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>来看一下类图：</p><p><img src="../../../java/1.%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1.%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/doc/st/assets/image-20210302154811236.png" alt="image-20210302154811236"></p><p>下面我们来看一下方法层面的单一职责设计。有时候，我们为了偷懒，通常会把一个方法写成下面 这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyUserInfo</span><span class="hljs-params">(String userName,String address)</span></span>&#123;<br>        userName = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        address = <span class="hljs-string">&quot;Changsha&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>还可能写成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyUserInfo</span><span class="hljs-params">(String userName,String address,<span class="hljs-keyword">boolean</span> bool)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(bool)&#123;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><br>        &#125;<br>        userName = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        address = <span class="hljs-string">&quot;Changsha&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>显然，上面的 modifyUserInfo()方法中都承担了多个职责，既可以修改 userName,也可以修改 address，甚至更多，明显不符合单一职责。那么我们做如下修改，把这个方法拆成两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyUserName</span><span class="hljs-params">(String userName)</span></span>&#123;<br>        userName = <span class="hljs-string">&quot;Tom&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyAddress</span><span class="hljs-params">(String address)</span></span>&#123;<br>        address = <span class="hljs-string">&quot;Changsha&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这修改之后，开发起来简单，维护起来也容易。但是，我们在实际开发中会项目依赖，组合，聚合 这些关系，还有还有项目的规模，周期，技术人员的水平，对进度的把控，很多类都不符合单一职责。 但是，我们在编写代码的过程，尽可能地让接口和方法保持单一职责，对我们项目后期的维护是有很大帮助的。</p><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则（Interface Segregation Principle, ISP）是指用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时应当注意以下几点：</p><ol><li>一个类对一类的依赖应该建立在最小的接口之上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）</li></ol><p>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性。我们在设计接口的时候，要多花时间去思考，要考虑业务模型，包括以后有可能发生变更 的地方还要做一些预判。所以，对于抽象，对业务模型的理解是非常重要的。下面我们来看一段代码， 写一个动物行为的抽象：</p><p>IAnimal 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IAnimal</span> </span>&#123;<br><br>    <span class="hljs-comment">//吃</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//飞</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//游泳</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Bird 类实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dog 类实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，Bird 的 swim()方法可能只能空着，Dog 的 fly()方法显然不可能的。这时候，我们针对 不同动物行为来设计不同的接口，分别设计 IEatAnimal，IFlyAnimal 和 ISwimAnimal 接口，来看代码：</p><p>IEatAnimal 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IEatAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IFlyAnimal 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IFlyAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ISwimAnimal 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ISwimAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dog 只实现 IEatAnimal 和 ISwimAnimal 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ISwimAnimal</span>,<span class="hljs-title">IEatAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Bird只实现IEatAnimal和IFlyAnimal接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IEatAnimal</span>, <span class="hljs-title">IFlyAnimal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来看下两种类图的对比，还是非常清晰明了的：</p><p><img src="../../../java/1.%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1.%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/doc/st/assets/image-20210303131255029.png" alt="image-20210303131255029"></p><p><img src="../../../java/1.%E6%9E%B6%E6%9E%84%E5%B8%88%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/1.%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/doc/st/assets/image-20210303131332982.png" alt="image-20210303131332982"></p><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><p>迪米特原则（Law of Demeter LoD）是指一个对象应该对其他对象保持最少的了解，又叫最少知道原则（Least Knowledge Principle,LKP），尽量降低类与类之间的耦合。迪米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为成员朋友类， 而出现在方法体内部的类不属于朋友类。 现在来设计一个权限系统，TeamLeader需要查看目前发布到线上的课程数量。这时候，TeamLeader 要找到员工 Employee 去进行统计，Employee 再把统计结果告诉 TeamLeader。接下来我们还是来看代码：</p>]]></content>
    
    
    <categories>
      
      <category>架构师内功心法</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-站在全局视角理解系统高并发</title>
    <link href="/2021/08/22/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/1-%E7%AB%99%E5%9C%A8%E5%85%A8%E5%B1%80%E8%A7%86%E8%A7%92%E7%90%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <url>/2021/08/22/2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/1-%E7%AB%99%E5%9C%A8%E5%85%A8%E5%B1%80%E8%A7%86%E8%A7%92%E7%90%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="站在全局的视角去思考高并发设计"><a href="#站在全局的视角去思考高并发设计" class="headerlink" title="站在全局的视角去思考高并发设计"></a>站在全局的视角去思考高并发设计</h1><p>用户数量100w -&gt; 1000W</p><ol><li>架构设计</li><li>人员的招聘</li><li>人员管理</li><li>目标推进</li><li>……</li></ol><h2 id="1000W个用户的问题分解"><a href="#1000W个用户的问题分解" class="headerlink" title="1000W个用户的问题分解"></a>1000W个用户的问题分解</h2><p><strong>tps/QPS/并发数/RT/DAU</strong></p><p><strong>200Wqps</strong></p><hr><p><strong>2/8定律</strong></p><p>每天大部分用户集中在5个小时以内访问</p><p>8000W的pv 在5个小时内集中访问</p><p>4500个请求/s *4 =18000个请求/s（峰值） qps</p><p>并发数量是多少？</p><p>qps*rt值</p><p>一个请求平均处理时间是3s = 54000</p><h1 id="有哪些因素影响到并发数量"><a href="#有哪些因素影响到并发数量" class="headerlink" title="有哪些因素影响到并发数量"></a>有哪些因素影响到并发数量</h1><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ol><li><p>针对Tomcat的优化</p><ul><li>连接数量(socket.accept)<ul><li>192.168.221.128:8080</li><li>Socket/File： Can’t open so many file</li><li>fd</li><li>连接数量是对内存的占用</li><li>一个连接(4096) 8k 100W（服务器能够支撑的并发连接数量）</li></ul></li></ul></li><li><p>如何在应用层面去支撑更多的链接数量(NIO机制)</p></li><li><p>线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">max-threads ; <span class="hljs-comment">//cpu 200默认的最大工作线程数量</span><br>max-connections: <span class="hljs-comment">//10000默认 NIO模式下; ARP ：</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol><li>虚拟机<ul><li>gc算法</li><li>内存空间</li></ul></li></ol><blockquote><p>空间不足的情况</p><ol><li>频繁GC</li><li>new object() , 内存溢出</li></ol></blockquote><p>Order order=new Order(); N -&gt;</p><h2 id="服务器的数量评估"><a href="#服务器的数量评估" class="headerlink" title="服务器的数量评估"></a>服务器的数量评估</h2><p>一台服务器能支撑多少qps =500 ， 18000 = 36台服务器.</p><p>频繁访问的页面或者服务去增加服务器</p><h2 id="RT值"><a href="#RT值" class="headerlink" title="RT值"></a>RT值</h2><p>业务逻辑的处理本质上就是IO操作；</p><ol><li>查询数据库(磁盘IO)<ul><li>数据库层面的基本优化</li></ul></li><li>访问磁盘（磁盘IO）<ul><li>交易对账的时候. 文本的解析和存储 </li><li>磁盘的页缓存（异步刷盘、同步算盘） </li><li>顺序读写 </li><li>零拷贝 </li><li>SSD（固态）- HDD （机械磁盘） </li><li>mmap(内存映射，减少拷贝次数) </li><li>异步化（最有效的武器）</li></ul></li><li>内存运算（内存IO）<ul><li>内存缓存</li></ul></li><li>（远程通信）网络通信（网络IO）<ul><li>池化技术（一次性创建多个连接） </li><li>长连接（） </li><li>同网段通信 </li><li>减少网络通信的场景</li></ul></li><li>异步化设计<ul><li>线程的设计</li><li>MQ的使用</li></ul></li><li>数据结构算法</li></ol><h2 id="应用架构层面"><a href="#应用架构层面" class="headerlink" title="应用架构层面"></a>应用架构层面</h2><p>采用微服务架构</p>]]></content>
    
    
    <categories>
      
      <category>分布式与高并发</category>
      
      <category>分布式存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
