<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>站在全局视角理解系统高并发</title>
    <link href="/2021/08/22/%E7%AB%99%E5%9C%A8%E5%85%A8%E5%B1%80%E8%A7%86%E8%A7%92%E7%90%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <url>/2021/08/22/%E7%AB%99%E5%9C%A8%E5%85%A8%E5%B1%80%E8%A7%86%E8%A7%92%E7%90%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="站在全局的视角去思考高并发设计"><a href="#站在全局的视角去思考高并发设计" class="headerlink" title="站在全局的视角去思考高并发设计"></a>站在全局的视角去思考高并发设计</h1><p>用户数量100w -&gt; 1000W</p><ol><li>架构设计</li><li>人员的招聘</li><li>人员管理</li><li>目标推进</li><li>……</li></ol><h2 id="1000W个用户的问题分解"><a href="#1000W个用户的问题分解" class="headerlink" title="1000W个用户的问题分解"></a>1000W个用户的问题分解</h2><p><strong>tps/QPS/并发数/RT/DAU</strong></p><p><strong>200Wqps</strong></p><hr><p><strong>2/8定律</strong></p><p>每天大部分用户集中在5个小时以内访问</p><p>8000W的pv 在5个小时内集中访问</p><p>4500个请求/s *4 =18000个请求/s（峰值） qps</p><p>并发数量是多少？</p><p>qps*rt值</p><p>一个请求平均处理时间是3s = 54000</p><h1 id="有哪些因素影响到并发数量"><a href="#有哪些因素影响到并发数量" class="headerlink" title="有哪些因素影响到并发数量"></a>有哪些因素影响到并发数量</h1><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ol><li><p>针对Tomcat的优化</p><ul><li>连接数量(socket.accept)<ul><li>192.168.221.128:8080</li><li>Socket/File： Can’t open so many file</li><li>fd</li><li>连接数量是对内存的占用</li><li>一个连接(4096) 8k 100W（服务器能够支撑的并发连接数量）</li></ul></li></ul></li><li><p>如何在应用层面去支撑更多的链接数量(NIO机制)</p></li><li><p>线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">max-threads ; <span class="hljs-comment">//cpu 200默认的最大工作线程数量</span><br>max-connections: <span class="hljs-comment">//10000默认 NIO模式下; ARP ：</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol><li>虚拟机<ul><li>gc算法</li><li>内存空间</li></ul></li></ol><blockquote><p>空间不足的情况</p><ol><li>频繁GC</li><li>new object() , 内存溢出</li></ol></blockquote><p>Order order=new Order(); N -&gt;</p><h2 id="服务器的数量评估"><a href="#服务器的数量评估" class="headerlink" title="服务器的数量评估"></a>服务器的数量评估</h2><p>一台服务器能支撑多少qps =500 ， 18000 = 36台服务器.</p><p>频繁访问的页面或者服务去增加服务器</p><h2 id="RT值"><a href="#RT值" class="headerlink" title="RT值"></a>RT值</h2><p>业务逻辑的处理本质上就是IO操作；</p><ol><li>查询数据库(磁盘IO)<ul><li>数据库层面的基本优化</li></ul></li><li>访问磁盘（磁盘IO）<ul><li>交易对账的时候. 文本的解析和存储 </li><li>磁盘的页缓存（异步刷盘、同步算盘） </li><li>顺序读写 </li><li>零拷贝 </li><li>SSD（固态）- HDD （机械磁盘） </li><li>mmap(内存映射，减少拷贝次数) </li><li>异步化（最有效的武器）</li></ul></li><li>内存运算（内存IO）<ul><li>内存缓存</li></ul></li><li>（远程通信）网络通信（网络IO）<ul><li>池化技术（一次性创建多个连接） </li><li>长连接（） </li><li>同网段通信 </li><li>减少网络通信的场景</li></ul></li><li>异步化设计<ul><li>线程的设计</li><li>MQ的使用</li></ul></li><li>数据结构算法</li></ol><h2 id="应用架构层面"><a href="#应用架构层面" class="headerlink" title="应用架构层面"></a>应用架构层面</h2><p>采用微服务架构</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
